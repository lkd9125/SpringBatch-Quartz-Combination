<?xml version="1.0" encoding="UTF-8"?>

<!-- 30초마다 설정 파일의 변경을 확인하고, 파일이 변경되면 다시 로딩 -->
<configuration scan="true" scanPeriod="30 seconds">
	
<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />

	<property name="LOG_PATH_NAME" value="${LOG_DIR}/data.log" />


	<!-- console에 로그 -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>%clr(%d{yyyy-MM-dd HH:mm:ss}){magenta} %clr([%thread]){blue} %clr(%-3level){} %clr(%logger{5}){cyan}- %msg %n</Pattern>
		</layout>
	</appender>	

	<springProfile name="local,dev">
		<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
			<file>${LOG_PATH_NAME}</file>
			<!-- 일자별로 로그파일 적용하기 -->
			<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
				<fileNamePattern>${LOG_PATH_NAME}.%d{yyyyMMdd}</fileNamePattern>
				<maxHistory>60</maxHistory> <!-- 일자별 백업파일의 보관기간 -->
			</rollingPolicy>
			<encoder>
				<pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n</pattern>
			</encoder>
		</appender>
	</springProfile>

	<logger name="jdbc" level="OFF"/>
	<logger name="jdbc.sqlonly" level="OFF"/>
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="DEBUG"/>
	<logger name="jdbc.connection" level="OFF"/>

	<root level="INFO">
		<appender-ref ref="STDOUT" />
	</root>

</configuration>